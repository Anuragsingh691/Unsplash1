{"version":3,"sources":["Components/Gallery/Gallery.js","Components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Gallery","props","gallery","loadMore","launchModal","selectedImage","searchedQuery","console","log","className","length","map","image","index","key","id","Math","ceil","height","width","src","urls","small","alt","description","data-toggle","data-target","onClick","style","maxWidth","href","target","rel","type","tabIndex","role","aria-labelledby","aria-hidden","page","username","SearchBar","fetchInitialImages","handleChange","handleSubmit","currentQuery","cursor","onSubmit","aria-label","value","onChange","autoFocus","App","ROOT","KEY","PERPAGE","setState","axios","get","then","res","results","data","catch","error","prevState","regular","user","links","html","state","e","preventDefault","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a1281749.chunk.js","sourcesContent":["import React from 'react'\n\nimport './styles.css'\n\nconst Gallery = (props) => {\n  const { gallery, loadMore, launchModal, selectedImage, searchedQuery } = props\n  console.log('gallery = ', gallery)\n  return (\n    <div className=\"content\">\n      <section className=\"grid\">\n        {gallery.length ? gallery.map( (image, index) => (\n          <div\n            key={image.id}\n            className={`item item-${Math.ceil(\n              image.height / image.width,\n            )}`}\n          >\n            <img\n              src={image.urls.small}\n              alt={image.description}\n              data-toggle=\"modal\" data-target=\"#selected-img-modal\"\n              onClick={() => launchModal(index)}\n            />\n          </div>\n        )) : (\n          <div className=\"error card text-danger mb-3 mx-auto\" style={{maxWidth: '18rem',}}>\n            <div className=\"card-body bg-pink\">\n              {searchedQuery === '' ? (\n              <p className=\"card-text\">Your entry is not valid. Please try again.</p>\n              ) : (\n                <p className=\"card-text\">An error has occured or this app has reached its rate limit allowed by <a href=\"https://unsplash.com/documentation\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a>. Please try again in a few minutes.</p>\n              )}\n            </div>\n          </div>\n        )}\n      </section>\n      <button type=\"button\" className=\"btn btn-outline-primary\" onClick={loadMore}>Load more...</button>\n      {/* modal */}\n      <div className=\"modal fade\" id=\"selected-img-modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"selected-img-modal-Label\" aria-hidden=\"true\">\n        <div className=\"modal-dialog modal-lg\" role=\"document\">\n          <div className=\"modal-content\">\n            <div className=\"modal-body\">\n              <div className=\"img-container\">\n                <img src={selectedImage.src} alt={selectedImage.description} className=\"mx-auto d-block img-fluid high-res-img\"/>\n              </div>\n              <hr/>\n              <p>{selectedImage.description}</p>\n              <p>Photo by <a href={selectedImage.page + `?utm_source=find-inspiration`} target=\"_blank\" rel=\"noopener noreferrer\">{selectedImage.username}</a> on <a href=\"https://unsplash.com/?utm_source=find-inspiration`\" target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a></p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Gallery","import React from 'react'\n\nconst SearchBar = (props) => {\n  const { fetchInitialImages, handleChange, handleSubmit, currentQuery } = props\n  return(\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <div className=\"container\">\n        <span className=\"navbar-brand\" onClick={fetchInitialImages} style={{cursor: 'pointer'}}>Find Inspiration</span>\n        <form className=\"form-inline my-2 my-lg-0 ml-auto\" onSubmit={handleSubmit}>\n          <input className=\"form-control mr-sm-2\" type=\"search\" aria-label=\"Search\" value={currentQuery} onChange={handleChange} autoFocus/>\n          <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n        </form>\n      </div>\n    </nav>\n  )\n}\n\nexport default SearchBar","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport './App.css';\nimport Gallery from './Components/Gallery/Gallery'\nimport SearchBar from './Components/SearchBar';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      gallery: [],\n      currentQuery: '',\n      searchedQuery: '',\n      page: 1,\n      selectedImage: {\n        description: '',\n        src: '',\n        username: '',\n        page: '',\n      },\n    }\n  }\n  ROOT = `https://api.unsplash.com/`\n  KEY =\"?client_id=Ec1n2AKEb00jiprb4C_6LFncc57yZHxst8TYXNPvp7s\"\n  PERPAGE = `&per_page=30`\n\n  fetchInitialImages = () => {\n    this.setState({ searchedQuery: 'Curated Collection'})\n    axios.get(`${this.ROOT}photos${this.KEY}${this.PERPAGE}&page=1`)\n      .then(res => {\n        let results = res.data\n        console.log('results = ', results)\n        this.setState(() => {\n          return { gallery: [...results] }\n        })\n      })\n      .catch(error => console.log(error))\n  }\n  \n  launchModal = (index) => {\n    this.setState((prevState) => {\n      return { \n        selectedImage: {\n          description: prevState.gallery[index].description,\n          src: prevState.gallery[index].urls.regular,\n          username: prevState.gallery[index].user.username,\n          page: prevState.gallery[index].user.links.html,\n        }\n      }\n    })\n  }\n\n  loadMore = () => {\n    this.setState((prevState) => {\n      return {page: prevState.page + 1}\n    }, () => {\n      axios.get(`${this.ROOT}search/photos${this.KEY}&query=${this.state.searchedQuery}${this.PERPAGE}&page=${this.state.page}`)\n        .then(res => {\n          let results = res.data.results\n          console.log('results = ', results)\n          this.setState((prevState) => {\n            return { gallery: [...prevState.gallery, ...results] }\n          })\n        })\n        .catch(error => console.log(error))\n    })\n  }\n\n  componentDidMount() {\n    this.fetchInitialImages()\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      currentQuery: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault()\n    console.log('currentQuery: ', this.state.currentQuery)\n    this.setState((prevState) => {\n      return {searchedQuery: prevState.currentQuery}\n    })\n    axios.get(`${this.ROOT}search/photos${this.KEY}&query=${this.state.currentQuery}${this.PERPAGE}`)\n      .then(res => {\n        let results = res.data.results\n        this.setState({\n          gallery: [...results],\n          currentQuery: '',\n        })\n      })\n      .catch(error => console.log(error))\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <SearchBar fetchInitialImages={this.fetchInitialImages} handleChange={this.handleChange} handleSubmit={this.handleSubmit} currentQuery={this.state.currentQuery} />\n        <div className=\"container\">\n          <h1 className=\"text-center\">{this.state.searchedQuery}</h1>\n          <Gallery gallery={this.state.gallery} loadMore={this.loadMore} launchModal={this.launchModal} selectedImage={this.state.selectedImage} searchedQuery={this.state.searchedQuery} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}